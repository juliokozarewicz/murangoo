"""
Django settings for murango project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv
from os import path
import logging.handlers
import datetime


# DJANGO CONFIGS
# ----------------------------------------------------------------------------
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Allowed host's
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=Csv())

# App's
INSTALLED_APPS = [
    
    # installed apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # auth
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # myapps
    'core',
    'blog',
    'financial',
    'captcha',
    'userinfo',
    'axes',

]

SITE_ID = 1

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'axes.middleware.AxesMiddleware',
]

ROOT_URLCONF = 'murango.urls'

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [path.join(BASE_DIR, 'templates'), path.join(BASE_DIR, 'templates', 'allauth')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # My options
                'userinfo.context_processors.global_context_userinfo',
                'financial.context_processors.global_context_financial',
            ],
        },
    },
]

WSGI_APPLICATION = 'murango.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE'),
        'HOST': config('DB_HOST'),
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'PORT': config('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# ----------------------------------------------------------------------------


# Internationalization
# ----------------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

#USE_L10N = True
#USE_THOUSAND_SEPARATOR = True
#DECIMAL_SEPARATOR = ','

USE_TZ = True

DATE_FORMAT = 'Y-m-d'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOCALE_PATHS = ['locale',]
# ----------------------------------------------------------------------------

# Static, media and dirs config
# ----------------------------------------------------------------------------
MEDIA_URL = '/media/'
MEDIA_ROOT = 'media'
STATIC_ROOT = path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = ['statics']

STATIC_URL = '/static/'
# ----------------------------------------------------------------------------

# allauth
# ----------------------------------------------------------------------------
LOGOUT_REDIRECT_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/financial'

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# auth email method
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory' # verification with email =)
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'

# REPLACE FORMS
ACCOUNT_FORMS = {'signup': 'userinfo.forms.MyCustomSignupForm',}
# ----------------------------------------------------------------------------

# BLOCK BRUTE FORCE
# ----------------------------------------------------------------------------
AXES_FAILURE_LIMIT = 5 # number max of fairules 
AXES_COOLOFF_TIME = 5 # minutes block
AXES_RESET_ON_SUCCESS = True
AXES_LOCKOUT_TEMPLATE  = '../templates/allauth/account/account_block_temp.html'
# ----------------------------------------------------------------------------

# Logs
# ----------------------------------------------------------------------------

current_datetime = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    # define formatters
    'formatters': {

        'verbose': {
            'format': '"{asctime}", "{levelname}", "{filename}", "{funcName}", "{module}", "{message}"',
            'style': '{',
        },

        'simple': {
            'format': '{levelname}, {message}',
            'style': '{',
        },

        'custom': {
        },

    },

    # define handles for logs
    'handlers': {

        'django': {
            'level': config('LOG_LEVEL'),
            'class': 'logging.FileHandler',
            'filename': f'2_logs/django/django_{current_datetime}.log',
            'formatter': 'verbose',
        },

        'webapp': {
            'level': config('LOG_LEVEL'),
            'class': 'logging.FileHandler',
            'filename': f'2_logs/webapp/webapp_{current_datetime}.log',
            'formatter': 'custom',
        },

    },

    # create loggers and call the handlers
    'loggers': {

        'django': {
            'handlers': ['django'],
            'level': 'DEBUG',
            'propagate': True,
        },
    
        'webapp': {
            'handlers': ['webapp'],
            'level': 'DEBUG',
            'propagate': True,
        },

    },

}

# ----------------------------------------------------------------------------

# Email
# ----------------------------------------------------------------------------
EMAIL_BACKEND = config('EMAIL_BACKEND')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_USE_TLS = config('EMAIL_USE_TLS')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
# ----------------------------------------------------------------------------

# RECAPTCH
# ----------------------------------------------------------------------------
RECAPTCHA_PUBLIC_KEY = config('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = config('RECAPTCHA_PRIVATE_KEY')
# ----------------------------------------------------------------------------